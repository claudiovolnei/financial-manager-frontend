@page "/historico"
@using FinancialManager.Web.Components.SubCategory.Model
@using FinancialManager.Web.Components.Transaction.Model
@inject HttpClient Http
@using FinancialManager.Web.Components.Transaction.Form
@using FinancialManager.Web.util
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using FinancialManager.Web.Components.Shared

<PageTitle>Historico</PageTitle>
<br>
<MudGrid Spacing="2" Justify="Justify.Center">
    <MonthYear @bind-YearValue="YearValue" MonthValueChanged="HandleValueChanged"/>
</MudGrid>
<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem>
        <MudFab Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="CreateTransaction"
                Variant="Variant.Filled"
                Size="Size.Large"
         />
    </MudItem>
</MudGrid>
<br>

@foreach(var typecard in ValuesTypeCard)
{
    if(typecard.Equals(TypeCard.Vazio)) 
    {
        continue;
    }

    @if(Transactions == null)
    {
        <p><em>Loading...</em></p>
    }
    else
    {
        <MudGrid>
            <MudItem xs="6" sm="4">
                <h6>@DisplayName(typecard)</h6>    
            </MudItem>
            <MudItem xs="6" sm="8">
                <h6 style="text-align: right;">Saldo: @($"R$ {String.Format("{0:#0.00}", SumTotal(Transactions, typecard))}") </h6>                
            </MudItem>
        </MudGrid>                
        @foreach(var transaction in Transactions)
        {
            @if(transaction.TypeCard == typecard)
            {   
                <MudCard OnClick="@(() => EditTransaction(transaction))" class="clickable-card">
                    <MudCardContent style="margin-bottom: 5px;">            
                        <MudGrid>
                            <!-- Primeira coluna com ícone grande -->
                            <MudItem sm="1" xs="2">
                                <MudIconButton Icon="@Icons.Material.Filled.RemoveRedEye" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="(() => EditTransaction(transaction))"></MudIconButton>                                
                            </MudItem>
                            <!-- Segunda coluna com duas linhas alinhadas com o ícone -->
                            <MudItem xs="6" sm="7" >
                                <MudText Typo="Typo.subtitle1" style="font-size: large;">@transaction.Title</MudText>
                                <MudText Typo="Typo.body2" style="font-size: small;">@transaction.Subcategory.Name</MudText>
                            </MudItem>
                            <!-- Terceira coluna com texto -->
                            <MudItem xs="4" sm="4"  style="text-align: right;">
                                <MudText Typo="Typo.body1" Style="@($"color:{colorValue(transaction.ValuePayment)};")">@($"R$ {String.Format("{0:#0.00}",transaction.ValuePayment)}")
                                </MudText>
                            </MudItem>
                        </MudGrid>
                    </MudCardContent>
                </MudCard>
            }                        
        }                    
    }
}

@code {
    private MudTheme Theme = new MudTheme();
    [CascadingParameter]
    public int AccountTypeIdSelect { get; set; }
    private TransactionOrderReponse[]? Transactions;
    HttpResponseMessage? response;
    private double Total;
    public HashSet<TypeCard> ValuesTypeCard { get; set; } = Enum.GetValues<TypeCard>().ToHashSet();
    public static string DisplayName(TypeCard typeCard) => typeCard.GetAttribute<DisplayAttribute>()?.Name?? string.Empty;
    public int MonthValue;
    public int YearValue;
    MudBlazor.Utilities.MudColor colorValue(double valuePayment) => valuePayment > 0 ? Theme.Palette.Success : Theme.Palette.Error;
    
    protected override async Task OnInitializedAsync()    
    {
        await GetTransactions(AccountTypeIdSelect);
    }
    public async Task GetTransactions(int accountId) 
    {
        Transactions = await Http.GetFromJsonAsync<TransactionOrderReponse[]?>($"https://financial-manager.azurewebsites.net/transaction-order/tipos-conta/{accountId}?Year={this.YearValue}&Month={this.MonthValue}");
    }

    public async Task HandleValueChanged(int monthValue)
    {
        this.MonthValue = monthValue;
        await GetTransactions(AccountTypeIdSelect);
    }

    protected override async Task OnParametersSetAsync() 
    {
        if(this.MonthValue != 0)
            await GetTransactions(AccountTypeIdSelect);
    }
    private double SumTotal(TransactionOrderReponse[] transactionsOrderReponse, TypeCard typeCard)
    {
        return transactionsOrderReponse
            .Where(x => x.TypeCard == typeCard)
            .Sum(s => s.ValuePayment);                   
    }

    private async Task CreateTransaction()
    {
        var parameters = new DialogParameters();
        parameters.Add("modelParameter", new TransactionOrderRequest(){
            AccountTypeId = AccountTypeIdSelect
        });
        var dialog = await DialogService.Show<CreateEditForm>("Transação", parameters).Result;

        response = dialog.Data as HttpResponseMessage ?? null;

        if (response != null) {
            if(response.IsSuccessStatusCode) {
                Snackbar.Add("Transação adicionado com sucesso.", Severity.Success);
            }
            else {
                Snackbar.Add("Erro ao adicionar transação", Severity.Error);
            }

            await OnInitializedAsync();
        }            
   }
    public async Task CloseDialog()
    {
        await OnInitializedAsync();
    }

    private async Task EditTransaction(TransactionOrderReponse transactionOrderReponse)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        parameters.Add(
            "modelParameter", new TransactionOrderRequest { 
                Id = transactionOrderReponse.Id,
                Title = transactionOrderReponse.Title, 
                SubcategoryId = transactionOrderReponse.Subcategory.Id, 
                ValuePayment = transactionOrderReponse.ValuePayment,
                TypeCard = transactionOrderReponse.TypeCard,
                DateOrder = transactionOrderReponse.DateOrder,
                DatePayment = transactionOrderReponse.DatePayment,
                AccountTypeId = AccountTypeIdSelect
            });

        var dialog = await DialogService.ShowAsync<CreateEditForm>("Alterar transação", parameters,options);

        var result = await dialog.Result;

        response = result.Data as HttpResponseMessage ?? null;

        if (response != null) {
           if(response.IsSuccessStatusCode) {
                Snackbar.Add("Transação alterado com sucesso.", Severity.Success);
            }
            else {
                Snackbar.Add("Erro ao alterar transação", Severity.Error);
            }

           await OnInitializedAsync();
        } 
        else 
        {
            await OnInitializedAsync();
            dialog.Close();
        }
    }
}
