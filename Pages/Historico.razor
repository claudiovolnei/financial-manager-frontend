@page "/historico"
@using FinancialManager.Web.Components.SubCategory.Model
@using FinancialManager.Web.Components.Transaction.Model
@inject HttpClient Http
@using FinancialManager.Web.Components.Transaction.Form
@using FinancialManager.Web.util
@using System.ComponentModel.DataAnnotations
@inject ISnackbar Snackbar
@inject IDialogService DialogService
@using FinancialManager.Web.Components.Shared

<PageTitle>Historico</PageTitle>
<br>
<MudGrid Spacing="2" Justify="Justify.Center">
    @* <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="(()=>BackMonth())"Size="Size.Small" />
    </MudItem>             
    <MudItem>
        <MudText Typo="Typo.h5" Align="Align.Center">@MonthValue/@YearValue</MudText>
    </MudItem>
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="(()=>NextMonth())"Size="Size.Small" />
    </MudItem> *@
    <MonthYear @bind-YearValue="YearValue" MonthValueChanged="HandleValueChanged"/>
</MudGrid>
<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem>
        <MudFab Color="Color.Primary" 
                StartIcon="@Icons.Material.Filled.Add"
                OnClick="CreateTransaction"
                Variant="Variant.Filled"
                Size="Size.Large"
         />
    </MudItem>
</MudGrid>
<br>

@foreach(var typecard in ValuesTypeCard)
{
    if(typecard.Equals(TypeCard.Vazio))
        continue;
    <h3>@DisplayName(typecard)</h3>    
    @* <MudCard>
        <MudCardContent> *@
            @if(Transactions == null)
            {
                <p><em>Loading...</em></p>
            }
            else
            {
                <h4 style="text-align: right;">Saldo: @($"R$ {@SumTotal(Transactions, typecard):#,##0.00}") </h4>
                
                    @foreach(var transaction in Transactions)
                    {
                        @if(transaction.TypeCard == typecard)
                        {  
                        <MudCard>
                            <MudCardContent style="margin-bottom: 5px;">            
                            <MudGrid>
                             <!-- Primeira coluna com ícone grande -->
                             <MudItem sm="1" xs="2">
                                <MudIconButton Icon="@Icons.Material.Filled.Edit" Variant="Variant.Filled" Size="Size.Small" Color="Color.Primary" OnClick="(() => EditTransaction(transaction))"></MudIconButton>
                                <MudIconButton Icon="@Icons.Material.Filled.Delete" Color="Color.Error" Size="Size.Small" OnClick="(() => DeleteTransaction(transaction.Id))"></MudIconButton>
                             </MudItem>
                             @* <MudItem xs="1" sm="2">
                                 <MudIcon Icon="@Icons.Material.Filled.Payment"Style="font-size: 3rem" />
                             </MudItem> *@
                             <!-- Segunda coluna com duas linhas alinhadas com o ícone -->
                             <MudItem xs="6" sm="7" >
                                 <MudText Typo="Typo.subtitle1">@transaction.Title</MudText>
                                 <MudText Typo="Typo.body2">@transaction.Subcategory.Name</MudText>
                             </MudItem>
                             <!-- Terceira coluna com texto -->
                             <MudItem xs="4" sm="4"  style="text-align: right;">
                                 <MudText Typo="Typo.body1" Style="@($"color:{colorValue(transaction.ValuePayment)};")">@($"R$ {@transaction.ValuePayment:###0.00}")</MudText>
                             </MudItem>                        
                              
                            </MudGrid>
                            </MudCardContent>
                        </MudCard>
                        }
                        
                    }                    
            }
        @* </MudCardContent>
    </MudCard> *@
}

<MudMessageBox @ref="mbox" Title="Excluir" CancelText="Cancel">
    <MessageContent>
        Deseja excluir a categoria?
    </MessageContent>
    <YesButton>
        <MudButton Variant="Variant.Filled" Color="Color.Error" StartIcon="@Icons.Material.Filled.DeleteForever">Delete!</MudButton>
    </YesButton>
</MudMessageBox>

@code {
    private MudTheme Theme = new MudTheme();
    [CascadingParameter]
    public int AccountTypeIdSelect { get; set; }
    private TransactionOrderReponse[]? Transactions;
    MudMessageBox? mbox { get; set; }
    HttpResponseMessage? response;
    private double Total;
    public HashSet<TypeCard> ValuesTypeCard { get; set; } = Enum.GetValues<TypeCard>().ToHashSet();
    public static string DisplayName(TypeCard typeCard) => typeCard.GetAttribute<DisplayAttribute>()?.Name?? string.Empty;
    public int MonthValue;
    public int YearValue;
    MudBlazor.Utilities.MudColor colorValue(double valuePayment) => valuePayment > 0 ? Theme.Palette.Success : Theme.Palette.Error;
    protected override async Task OnInitializedAsync()    
    {
        await GetTransactions(AccountTypeIdSelect);
    }
    public async Task GetTransactions(int accountId) 
    {
        Transactions = await Http.GetFromJsonAsync<TransactionOrderReponse[]?>($"https://financial-manager.azurewebsites.net/transaction-order/tipos-conta/{accountId}?Year={this.YearValue}&Month={this.MonthValue}");
    }

    public async Task HandleValueChanged(int monthValue)
    {
        this.MonthValue = monthValue;
        await GetTransactions(AccountTypeIdSelect);
    }

    protected override async Task OnParametersSetAsync() 
    {
        if(this.MonthValue != 0)
            await GetTransactions(AccountTypeIdSelect);
    }
    private double SumTotal(TransactionOrderReponse[] transactionsOrderReponse, TypeCard typeCard)
    {
        return transactionsOrderReponse
            .Where(x => x.TypeCard == typeCard)
            .Sum(s => s.ValuePayment);                   
    }

    private async Task CreateTransaction()
    {
        var parameters = new DialogParameters();
        parameters.Add("modelParameter", new TransactionOrderRequest(){
            AccountTypeId = AccountTypeIdSelect
        });
        var dialog = await DialogService.Show<CreateEditForm>("Transação", parameters).Result;

        response = dialog.Data as HttpResponseMessage ?? null;

        if (response != null) {
            if(response.IsSuccessStatusCode) {
                Snackbar.Add("Transação adicionado com sucesso.", Severity.Success);
            }
            else {
                Snackbar.Add("Erro ao adicionar transação", Severity.Error);
            }

            await OnInitializedAsync();
        }            
   }
    private async Task EditTransaction(TransactionOrderReponse transactionOrderReponse)
    {
        var parameters = new DialogParameters();
        var options = new DialogOptions { CloseOnEscapeKey = true };
        parameters.Add(
            "modelParameter", new TransactionOrderRequest { 
                Id = transactionOrderReponse.Id,
                Title = transactionOrderReponse.Title, 
                SubcategoryId = transactionOrderReponse.Subcategory.Id, 
                ValuePayment = transactionOrderReponse.ValuePayment,
                TypeCard = transactionOrderReponse.TypeCard,
                DateOrder = transactionOrderReponse.DateOrder,
                DatePayment = transactionOrderReponse.DatePayment,
                AccountTypeId = AccountTypeIdSelect
            });
        var dialog = await DialogService.Show<CreateEditForm>("Alterar transação", parameters,options).Result;

        response = dialog.Data as HttpResponseMessage ?? null;

        if (response != null) {
           if(response.IsSuccessStatusCode) {
                Snackbar.Add("Transação alterado com sucesso.", Severity.Success);
            }
            else {
                Snackbar.Add("Erro ao alterar transação", Severity.Error);
            }

           await OnInitializedAsync();
        }
}
    private async Task DeleteTransaction(int id)
    {
        bool? result = await mbox.Show();

        if(result.Value) {
            using var response =  await Http.DeleteAsync($"https://financial-manager.azurewebsites.net/transaction-order/{id}");

            if (response.IsSuccessStatusCode)
                Snackbar.Add("Transação excluída com sucesso.", Severity.Success);
            else
                Snackbar.Add("Erro ao alterado transação", Severity.Error);
        }

        await OnInitializedAsync();
   }
}
