@page "/"
@using FinancialManager.Web.Components.Shared
@inject HttpClient Http
@using FinancialManager.Web.Components.Dashboard.Model

<br>
<MudCard>
    <MudCardContent>
        <MonthYear @bind-YearValue="YearValue" MonthValueChanged="HandleValueChanged"/>
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudText Style="font-size: 2em;" Typo="Typo.body2">R$ @(String.Format("{0:#0.00}", DashboardResponse.Amount))</MudText>
            </MudItem>             
        </MudGrid>   
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudText Style="font-size: medium;color: green" Typo="Typo.body2">Entradas R$ @(String.Format("{0:#0.00}",DashboardResponse.Entrys))</MudText>
            </MudItem>             
            <MudItem>
                <MudText Style="font-size: medium;color: red" Typo="Typo.body2">Saídas R$ @(String.Format("{0:#0.00}",DashboardResponse.Outputs))</MudText>
            </MudItem>             
        </MudGrid>      
    </MudCardContent>
    <MudCardActions>
       
    </MudCardActions>
</MudCard>
<br>
<MudCard>
    <MudCardHeader>
        <CardHeaderContent>
            <MudText Typo="Typo.h6">Lançamentos por categoria</MudText>
        </CardHeaderContent>        
    </MudCardHeader>
    <MudCardContent>
        <MudGrid Spacing="2" Justify="Justify.Center">
            <MudItem>
                <MudChart ChartType="ChartType.Donut" LegendPosition="@LegendPosition" Width="300px" Height="300px" InputData="@data" InputLabels="@labels">
        	        <CustomGraphics>
        		        <text class="donut-inner-text" x="47%" y="35%" dominant-baseline="middle"  text-anchor="middle" fill="black" font-family="Helvetica" font-size="2">Total Despesa</text>
        		        <text class="donut-inner-text" x="47%" y="50%" dominant-baseline="middle"       text-anchor="middle" fill="black" font-family="Helvetica" font-size="5">R$@(String.Format("{0:#0.00}",data.Sum()))</text>
        	        </CustomGraphics>
                </MudChart>
            </MudItem>
        </MudGrid>
    </MudCardContent>
    <MudCardActions>
        
    </MudCardActions>
</MudCard>

@code {
    [CascadingParameter]
    public int AccountTypeIdSelect { get; set; }
    public double[] data = [];
    public string[] labels = [];
    public Position LegendPosition { get; set; } = Position.Bottom;
    private DashboardResponse DashboardResponse;
    private int MonthValue;
    private int YearValue;  
    protected override async Task OnParametersSetAsync()
    {
        if(this.MonthValue != 0)
            await GetDashboard(AccountTypeIdSelect);
    }

    public async Task HandleValueChanged(int monthValue)
    {
        this.MonthValue = monthValue;
        await GetDashboard(AccountTypeIdSelect);
    }
    private async Task GetDashboard(int accountId)
    {
        try
        {
            Console.WriteLine($"Objeto antes => {DashboardResponse}");
            DashboardResponse = await Http.GetFromJsonAsync<DashboardResponse>($"https://financial-manager.azurewebsites.net/transaction-order/dashboard/{accountId}?Year={this.YearValue}&Month={ this.MonthValue}");

            
            data = DashboardResponse.Categories.Select(x => Convert.ToDouble(x.Item2)).ToArray();
            labels = DashboardResponse.Categories.Select(x => $"{x.Item1} R$ {String.Format("{0:#0.00}",x.Item2)}").ToArray();    
            Console.WriteLine($"Objeto depois => {DashboardResponse}");
        }
        catch(Exception ex)
        {
            Console.WriteLine($"{ex.Message} - {ex.InnerException?.Message}");
        }
    } 
}