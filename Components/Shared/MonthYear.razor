<MudGrid Spacing="2" Justify="Justify.Center">
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowLeft" OnClick="(()=>BackMonth())"Size="Size.Small" />
    </MudItem>             
    <MudItem>
        <MudText Typo="Typo.h5" Align="Align.Center">@monthName/@YearValue</MudText>
    </MudItem>
    <MudItem>
        <MudIconButton Icon="@Icons.Material.Filled.KeyboardArrowRight" OnClick="(()=>NextMonth())"Size="Size.Small" />
    </MudItem>
</MudGrid>

@code {
    [Parameter]
    public int MonthValue { get; set; }
    public string monthName = String.Empty;
    [Parameter]
    public int YearValue { get; set; }
    [Parameter]
    public EventCallback<int> MonthValueChanged { get; set; }
    [Parameter]
    public EventCallback<int> YearValueChanged { get; set; }

    protected override async Task OnInitializedAsync()    
    {
        if(string.IsNullOrEmpty(this.monthName))
        {
            this.monthName = TypesMonth.Where(x => x.Item1 == DateTime.Now.Month).FirstOrDefault().Item2;
            this.MonthValue = TypesMonth.Where(x => x.Item1 == DateTime.Now.Month).FirstOrDefault().Item1;
        }

        if(YearValue == 0)
            this.YearValue = DateTime.Now.Year;

        await YearValueChanged.InvokeAsync(this.YearValue);
        await MonthValueChanged.InvokeAsync(this.MonthValue);
    }

    public async Task NextMonth()
    {
        if(monthName.Equals("Dezembro"))
        {
            this.monthName = TypesMonth.Where(x => x.Item1 == 1).FirstOrDefault().Item2;
            this.MonthValue = TypesMonth.Where(x => x.Item1 == 1).FirstOrDefault().Item1;
            this.YearValue = YearValue + 1;
        }
        else
        {
            this.monthName = TypesMonth
                    .Where(x => x.Item1 == TypesMonth.Where(x => x.Item2 == this.monthName).FirstOrDefault().Item1 + 1)
                    .FirstOrDefault().Item2;
            this.MonthValue = TypesMonth
                    .Where(x => x.Item1 == TypesMonth.Where(x => x.Item2 == this.monthName).FirstOrDefault().Item1)
                    .FirstOrDefault().Item1;
        }

        await OnInitializedAsync();
        
    }
    public async Task BackMonth()
    {
        if(monthName.Equals("Janeiro"))
        {
            this.monthName = TypesMonth.Where(x => x.Item1 == 12).FirstOrDefault().Item2;
            this.MonthValue = TypesMonth.Where(x => x.Item1 == 12).FirstOrDefault().Item1;
            this.YearValue = YearValue -1;
        }
        else
        {
            this.monthName = TypesMonth
                    .Where(x => x.Item1 == TypesMonth.Where(x => x.Item2 == this.monthName).FirstOrDefault().Item1 -1)
                    .FirstOrDefault().Item2;
            this.MonthValue = TypesMonth
                    .Where(x => x.Item1 == TypesMonth.Where(x => x.Item2 == this.monthName).FirstOrDefault().Item1)
                    .FirstOrDefault().Item1;
        }

        await OnInitializedAsync();
    }


     static List<(int, string)> TypesMonth = new List<(int, string)>
    {
        (1, "Janeiro"),
        (2, "Fevereiro"),
        (3, "Mar√ßo"),
        (4, "Abril"),
        (5, "Maio"),
        (6, "Junho"),
        (7, "Julho"),
        (8, "Agosto"),
        (9, "Setembro"),
        (10, "Outubro"),
        (11, "Novembro"),
        (12, "Dezembro"),
    };   
}